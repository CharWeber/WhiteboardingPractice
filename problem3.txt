Question #3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example
Input: "aaabccdddda"

Output: "3ab2c4da"


--------

without recursion
    
    function zipString(string){
      const strArray= string.split('');
      let returnString = ''
      for (i=0; i<strArray.length; i++){
        if (strArray[i-1] != strArray[i]){

        let counter = 1;
        for (j=i; strArray[j] === strArray[j+1]; j++){
          if(strArray[j] === strArray[j+1]){
            counter++
          }
        }
        if (counter > 1){
          returnString += counter + strArray[i];
        }
        else{
          returnString += strArray[i];
        }
      }
    }
    return returnString
  }
    

----------

with recursion

const zipString = (string) =>{

}