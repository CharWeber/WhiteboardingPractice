Question #3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example
Input: "aaabccdddda"

Output: "3ab2c4da"


--------

without recursion
    
function zipString(string){
  const strArray = string.split('');
  let returnString = '';
  for (i=0; i<strArray.length; i++){
    let counter = 1;
    for (j = i; j< strArray.length; j++)
    if (strArray[i] !== strArray[j+1]){
      break;
    }
    else{
      counter++
      i++
    }
    if (counter > 1){
      returnString += counter + strArray[i]
    }
    else{
      returnString += strArray[i]
    }
  }
  return returnString
}



Example
Input: "aaabccdddda"

Output: "3ab2c4da"
----------

with recursion

const zipStringRecursive = (string) =>{
  if (string.length <=1){
    return string
  }
  let strArray = string.split('');
  

}